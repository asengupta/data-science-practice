# ## Running the file
# If you wish to use your own copy of the data, use the following command:
#
# ``python lending-club-main.py [{-i |--input=}<loan-csv>] [-h | --help]``
#
# Here are some examples:
#
# ``python lending-club-main.py --input=loan.csv``
# ``python lending-club-main.py -i loan.csv``
# ``python lending-club-main.py``
# ``python lending-club-main.py --help``
#
# All of these arguments are optional. Providing no arguments makes the code read from the default location, i.e. ```./data```.
#
# ## Instructions on regenerating this Jupyter Notebook
# The Jupyter notebook can be regenerated by installing P2J, like so:
#
# ``pip install p2j``
#
# and running the following:
#
# ``p2j -o code/lending-club-main.py -t notebook/lending-club-main.ipynb``

import getopt
import logging
import sys

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

DEFAULT_DATASET_LOCATION = "../data"
DEFAULT_LOAN_CSV_FILENAME = "loan.csv"


# This function reads the loan data set
def parse_commandline_options(args):
    print(f"args are: {args}")
    loan_csv = f"{DEFAULT_DATASET_LOCATION}/{DEFAULT_LOAN_CSV_FILENAME}"

    try:
        options, arguments = getopt.getopt(args, "i:hf:", ["input=", "help"])
        for option, argument in options:
            if option in ("-h", "--help"):
                print_help_text()
            elif option in ("-i", "--input"):
                loan_csv = argument
            else:
                print(f"{option} was not recognised as a valid option")
                print_help_text()
                print("Allowing to continue since Jupyter notebook passes in other command-line options")
        return loan_csv
    except getopt.GetoptError as e:
        sys.stderr.write("%s: %s\n" % (args[0], e.msg))
        print_help_text()
        exit(2)


def print_help_text():
    print("USAGE: python lending-club-main.py [{-i |--input=}<loan-csv>]")


# This function overrides Jupyter's default logger so that we can output things based on our formatting preferences
def setup_logging():
    for handler in logging.root.handlers[:]:
        logging.root.removeHandler(handler)
    logger = logging.getLogger()
    formatter = logging.Formatter('%(message)s')
    ch = logging.StreamHandler()
    ch.setLevel(logging.INFO)
    ch.setFormatter(formatter)
    logger.setLevel(logging.INFO)
    logger.addHandler(ch)


def read_csv(loan_csv):
    return pd.read_csv(loan_csv)


def heading(heading_text):
    print("-"*100)
    print(heading_text)
    print("-"*100)


def clean_loans(raw_loans):
    ##### Removing Desc column from dataset as it will be not helpful for us in this case study, whereas it can be helpful if we were solving NLP problem
    loans_wo_desc=raw_loans.drop('desc',axis=1)
    ## Checking which column can be used as an identifier
    heading("Check which column can be used as an identifier")
    print(loans_wo_desc['id'].nunique())
    print(loans_wo_desc['member_id'].nunique())
    ### Both this column can be used as an identifier, anyone of these can be dropped. Also none of this is helpful for our analysis. They are just identifier

    heading("Column Data Types")
    print(loans_wo_desc.dtypes)
    heading("Null Entries Statistics")
    null_entry_statistics = loans_wo_desc.isnull().sum() / len(loans_wo_desc.index)

    null_columns = null_entry_statistics[null_entry_statistics == 1.0].index.to_numpy()
    heading("Completely Null Columns")
    print(null_columns)
    loans_wo_nulls = loans_wo_desc.drop(null_columns, axis = 1)
    heading("Loan Info after scrubbing completely empty columns")
    print(loans_wo_nulls.info())

def analyse(raw_loans):
    # raw_loans=pd.read_csv("/content/drive/MyDrive/Upgrad Data Set/Lending Club Case Study/loan.csv",low_memory=False)
    print(raw_loans.head())
    ## Number of Rows and Columns in the data set
    print(raw_loans.shape)
    print(raw_loans.columns)
    clean_loans(raw_loans)

def main():
    setup_logging()
    analyse(read_csv(parse_commandline_options(sys.argv[1:])))


main()
